{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\n\nconst useWordle = solution => {\n  _s();\n\n  const [turn, setTurn] = useState(0);\n  const [currentGuess, setCurrentGuess] = useState('');\n  const [guesses, setGuesses] = useState([]); // each guess is an array\n\n  const [history, setHistory] = useState([]); // each guess is a string\n\n  const [isCorrect, setIsCorrect] = useState(false);\n\n  const formatGuess = () => {\n    console.log('formatting the guess - ', currentGuess);\n  };\n\n  const addNewGuess = () => {};\n\n  const handleKeyup = _ref => {\n    let {\n      key\n    } = _ref;\n\n    if (key === 'Enter') {\n      // only add guess if turn  is less than 5\n      if (turn > 5) {\n        console.log('you used all your guesses');\n        return;\n      } // do not allow duplicate words\n\n\n      if (history.includes(currentGuess)) {\n        console.log('you already tried this word');\n        return;\n      } // check word is solution.length chars long\n\n\n      if (currentGuess.length !== solution.length) {\n        console.log('guess must be x chars long');\n        return;\n      }\n\n      formatGuess();\n    }\n\n    if (key === 'Backspace') {\n      setCurrentGuess(prev => {\n        return prev.slice(0, -1);\n      });\n      return;\n    }\n\n    if (/^[A-Za-z]$/.test(key)) {\n      if (currentGuess.length < solution.length) {\n        setCurrentGuess(prev => {\n          return prev + key;\n        });\n      }\n    }\n  };\n\n  return {\n    turn,\n    currentGuess,\n    guesses,\n    isCorrect,\n    handleKeyup\n  };\n};\n\n_s(useWordle, \"IVXWGlg92Q9wlAIzJ5cBAfAX2uI=\");\n\nexport default useWordle;","map":{"version":3,"sources":["/Users/remiquilliet/Documents/Projets/lqdlf/react-footdle/src/hooks/useWordle.js"],"names":["useState","useWordle","solution","turn","setTurn","currentGuess","setCurrentGuess","guesses","setGuesses","history","setHistory","isCorrect","setIsCorrect","formatGuess","console","log","addNewGuess","handleKeyup","key","includes","length","prev","slice","test"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,SAAS,GAAIC,QAAD,IAAc;AAAA;;AAE5B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACK,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,EAAD,CAAtC,CAJ4B,CAIe;;AAC3C,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,EAAD,CAAtC,CAL4B,CAKe;;AAC3C,QAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,KAAD,CAA1C;;AAEA,QAAMa,WAAW,GAAG,MAAM;AACtBC,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCV,YAAvC;AACH,GAFD;;AAIA,QAAMW,WAAW,GAAG,MAAM,CAGzB,CAHD;;AAKA,QAAMC,WAAW,GAAG,QAAW;AAAA,QAAV;AAACC,MAAAA;AAAD,KAAU;;AAC3B,QAAIA,GAAG,KAAK,OAAZ,EAAoB;AAChB;AACA,UAAIf,IAAI,GAAG,CAAX,EAAa;AACTW,QAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACA;AACH,OALe,CAMhB;;;AACA,UAAIN,OAAO,CAACU,QAAR,CAAiBd,YAAjB,CAAJ,EAAmC;AAC/BS,QAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACA;AACH,OAVe,CAWhB;;;AACA,UAAIV,YAAY,CAACe,MAAb,KAAwBlB,QAAQ,CAACkB,MAArC,EAA4C;AACxCN,QAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACA;AACH;;AACDF,MAAAA,WAAW;AAKd;;AAGD,QAAIK,GAAG,KAAK,WAAZ,EAAwB;AACpBZ,MAAAA,eAAe,CAAEe,IAAD,IAAU;AACtB,eAAOA,IAAI,CAACC,KAAL,CAAW,CAAX,EAAa,CAAC,CAAd,CAAP;AACH,OAFc,CAAf;AAGA;AACH;;AAED,QAAI,aAAaC,IAAb,CAAkBL,GAAlB,CAAJ,EAA4B;AACxB,UAAIb,YAAY,CAACe,MAAb,GAAsBlB,QAAQ,CAACkB,MAAnC,EAA2C;AACvCd,QAAAA,eAAe,CAAEe,IAAD,IAAU;AACtB,iBAAOA,IAAI,GAAGH,GAAd;AACH,SAFc,CAAf;AAGH;AACJ;AACJ,GAvCD;;AAyCA,SAAO;AAACf,IAAAA,IAAD;AAAOE,IAAAA,YAAP;AAAqBE,IAAAA,OAArB;AAA8BI,IAAAA,SAA9B;AAAyCM,IAAAA;AAAzC,GAAP;AACH,CA3DD;;GAAMhB,S;;AA6DN,eAAeA,SAAf","sourcesContent":["import { useState } from \"react\"\n\nconst useWordle = (solution) => {\n\n    const [turn, setTurn] = useState(0) \n    const [currentGuess, setCurrentGuess] = useState('')\n    const [guesses, setGuesses] = useState([]) // each guess is an array\n    const [history, setHistory] = useState([]) // each guess is a string\n    const [isCorrect, setIsCorrect] = useState(false)\n\n    const formatGuess = () => {\n        console.log('formatting the guess - ', currentGuess)\n    }\n\n    const addNewGuess = () => {\n\n\n    }\n\n    const handleKeyup = ({key}) => {\n        if (key === 'Enter'){\n            // only add guess if turn  is less than 5\n            if (turn > 5){\n                console.log('you used all your guesses')\n                return\n            }\n            // do not allow duplicate words\n            if (history.includes(currentGuess)){\n                console.log('you already tried this word')\n                return\n            }\n            // check word is solution.length chars long\n            if (currentGuess.length !== solution.length){\n                console.log('guess must be x chars long')\n                return\n            }\n            formatGuess()\n            \n\n\n\n        }\n\n\n        if (key === 'Backspace'){\n            setCurrentGuess((prev) => {\n                return prev.slice(0,-1)\n            })\n            return\n        }\n        \n        if (/^[A-Za-z]$/.test(key)) {\n            if (currentGuess.length < solution.length) {\n                setCurrentGuess((prev) => {\n                    return prev + key\n                })\n            }\n        }\n    }\n\n    return {turn, currentGuess, guesses, isCorrect, handleKeyup}\n}\n\nexport default useWordle"]},"metadata":{},"sourceType":"module"}