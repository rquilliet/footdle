{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\n\nconst useWordle = solution => {\n  _s();\n\n  const [turn, setTurn] = useState(0);\n  const [currentGuess, setCurrentGuess] = useState('');\n  const [guesses, setGuesses] = useState([...Array(6)]); // each guess is an array\n\n  const [history, setHistory] = useState([]); // each guess is a string\n\n  const [isCorrect, setIsCorrect] = useState(false); // format a guess into an array of letter objects \n  // e.g. [{key: 'a', color: 'yellow'}]\n\n  const formatGuess = () => {\n    let solutionLowerCase = solution.toLowerCase();\n    let solutionArray = [...solutionLowerCase];\n    let formattedGuess = [...currentGuess].map(l => {\n      return {\n        key: l,\n        color: 'grey'\n      };\n    }); // find any green letters\n\n    formattedGuess.forEach((l, i) => {\n      if (solutionLowerCase[i] === l.key) {\n        formattedGuess[i].color = 'green';\n        solutionArray[i] = null;\n      }\n    }); // find any yellow letters\n\n    formattedGuess.forEach((l, i) => {\n      if (solutionArray.includes(l.key) && l.color !== 'green') {\n        formattedGuess[i].color = 'yellow';\n        solutionArray[solutionArray.indexOf(l.key)] = null;\n      }\n    });\n    return formattedGuess;\n  }; // add a new guess to the guesses state\n  // update the isCorrect state if the guess is correct\n  // add one to the turn state\n\n\n  const addNewGuess = formattedGuess => {\n    if (currentGuess === solution) {\n      setIsCorrect(true);\n    }\n\n    setGuesses(prevGuesses => {\n      let newGuesses = [...prevGuesses];\n      newGuesses[turn] = formattedGuess;\n      return newGuesses;\n    });\n    setHistory(prevHistory => {\n      return [...prevHistory, currentGuess];\n    });\n    setTurn(prevTurn => {\n      return prevTurn + 1;\n    });\n    setCurrentGuess('');\n  }; // handle keyup event & track current guess\n  // if user presses enter, add the new guess\n\n\n  const handleKeyup = _ref => {\n    let {\n      key\n    } = _ref;\n\n    if (key === 'Enter') {\n      // only add guess if turn is less than 5\n      if (turn > 5) {\n        console.log('you used all your guesses!');\n        return;\n      } // do not allow duplicate words\n\n\n      if (history.includes(currentGuess)) {\n        console.log('you already tried that word.');\n        return;\n      } // check word is 5 chars\n\n\n      if (currentGuess.length !== solution.length) {\n        console.log('guess must be x chars long');\n        return;\n      }\n\n      const formatted = formatGuess();\n      addNewGuess(formatted);\n    }\n\n    if (key === 'Backspace') {\n      setCurrentGuess(prev => {\n        return prev.slice(0, -1);\n      });\n      return;\n    }\n\n    if (/^[A-Za-z]$/.test(key)) {\n      if (currentGuess.length < solution.length) {\n        setCurrentGuess(prev => {\n          return prev + key;\n        });\n      }\n    }\n  };\n\n  return {\n    turn,\n    currentGuess,\n    guesses,\n    isCorrect,\n    handleKeyup\n  };\n};\n\n_s(useWordle, \"dCcTfI6cWxblKRWl+nFnNGvNbio=\");\n\nexport default useWordle;","map":{"version":3,"sources":["/Users/remiquilliet/Documents/Projets/lqdlf/react-footdle/src/hooks/useWordle.js"],"names":["useState","useWordle","solution","turn","setTurn","currentGuess","setCurrentGuess","guesses","setGuesses","Array","history","setHistory","isCorrect","setIsCorrect","formatGuess","solutionLowerCase","toLowerCase","solutionArray","formattedGuess","map","l","key","color","forEach","i","includes","indexOf","addNewGuess","prevGuesses","newGuesses","prevHistory","prevTurn","handleKeyup","console","log","length","formatted","prev","slice","test"],"mappings":"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","sourcesContent":["import { useState } from 'react'\n\nconst useWordle = (solution) => {\n  const [turn, setTurn] = useState(0) \n  const [currentGuess, setCurrentGuess] = useState('')\n  const [guesses, setGuesses] = useState([...Array(6)]) // each guess is an array\n  const [history, setHistory] = useState([]) // each guess is a string\n  const [isCorrect, setIsCorrect] = useState(false)\n\n  // format a guess into an array of letter objects \n  // e.g. [{key: 'a', color: 'yellow'}]\n  const formatGuess = () => {\n    let solutionLowerCase = solution.toLowerCase()\n    let solutionArray = [...solutionLowerCase]\n    let formattedGuess = [...currentGuess].map((l) => {\n      return {key: l, color: 'grey'}\n    })\n\n    // find any green letters\n    formattedGuess.forEach((l, i) => {\n      if (solutionLowerCase[i] === l.key) {\n        formattedGuess[i].color = 'green'\n        solutionArray[i] = null\n      }\n    })\n    \n    // find any yellow letters\n    formattedGuess.forEach((l, i) => {\n      if (solutionArray.includes(l.key) && l.color !== 'green') {\n        formattedGuess[i].color = 'yellow'\n        solutionArray[solutionArray.indexOf(l.key)] = null\n      }\n    })\n\n    return formattedGuess\n  }\n\n  // add a new guess to the guesses state\n  // update the isCorrect state if the guess is correct\n  // add one to the turn state\n  const addNewGuess = (formattedGuess) => {\n    if (currentGuess === solution) {\n      setIsCorrect(true)\n    }\n    setGuesses(prevGuesses => {\n      let newGuesses = [...prevGuesses]\n      newGuesses[turn] = formattedGuess\n      return newGuesses\n    })\n    setHistory(prevHistory => {\n      return [...prevHistory, currentGuess]\n    })\n    setTurn(prevTurn => {\n      return prevTurn + 1\n    })\n    setCurrentGuess('')\n  }\n\n  // handle keyup event & track current guess\n  // if user presses enter, add the new guess\n  const handleKeyup = ({ key }) => {\n    if (key === 'Enter') {\n      // only add guess if turn is less than 5\n      if (turn > 5) {\n        console.log('you used all your guesses!')\n        return\n      }\n      // do not allow duplicate words\n      if (history.includes(currentGuess)) {\n        console.log('you already tried that word.')\n        return\n      }\n      // check word is 5 chars\n            if (currentGuess.length !== solution.length){\n                console.log('guess must be x chars long')\n                return\n            }\n            const formatted = formatGuess()\n            addNewGuess(formatted)\n            \n\n\n\n        }\n\n\n        if (key === 'Backspace'){\n            setCurrentGuess((prev) => {\n                return prev.slice(0,-1)\n            })\n            return\n        }\n        \n        if (/^[A-Za-z]$/.test(key)) {\n            if (currentGuess.length < solution.length) {\n                setCurrentGuess((prev) => {\n                    return prev + key\n                })\n            }\n        }\n    }\n\n    return {turn, currentGuess, guesses, isCorrect, handleKeyup}\n}\n\nexport default useWordle"]},"metadata":{},"sourceType":"module"}