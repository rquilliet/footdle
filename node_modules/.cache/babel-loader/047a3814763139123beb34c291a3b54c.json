{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\n\nconst useWordle = solution => {\n  _s();\n\n  const [turn, setTurn] = useState(0);\n  const [currentGuess, setCurrentGuess] = useState('');\n  const [guesses, setGuesses] = useState([]); // each guess is an array\n\n  const [history, setHistory] = useState([]); // each guess is a string\n\n  const [isCorrect, setIsCorrect] = useState(false);\n\n  const formatGuess = () => {\n    let solutionArray = [...solution];\n    let formattedGuess = [...currentGuess].map(l => {\n      return {\n        key: l,\n        color: 'grey'\n      };\n    }); // find green letters\n\n    formattedGuess.forEach((l, i) => {\n      if (solutionArray[i] === l.key) {\n        formattedGuess[i].color = 'green';\n        solutionArray[i] = null;\n      }\n    }); // find yellox letters\n\n    formattedGuess.forEach((l, i) => {\n      if (solutionArray.includes(l.key) && l.color !== 'green') {\n        formattedGuess[i].color = 'yellow';\n        solutionArray[solutionArray.indexOf(l.key)] = null;\n      }\n    });\n    return formattedGuess;\n  };\n\n  const addNewGuess = () => {};\n\n  const handleKeyup = _ref => {\n    let {\n      key\n    } = _ref;\n\n    if (key === 'Enter') {\n      // only add guess if turn  is less than 5\n      if (turn > 5) {\n        console.log('you used all your guesses');\n        return;\n      } // do not allow duplicate words\n\n\n      if (history.includes(currentGuess)) {\n        console.log('you already tried this word');\n        return;\n      } // check word is solution.length chars long\n\n\n      if (currentGuess.length !== solution.length) {\n        console.log('guess must be x chars long');\n        return;\n      }\n\n      const formatted = formatGuess();\n      console.log(formatted);\n    }\n\n    if (key === 'Backspace') {\n      setCurrentGuess(prev => {\n        return prev.slice(0, -1);\n      });\n      return;\n    }\n\n    if (/^[A-Za-z]$/.test(key)) {\n      if (currentGuess.length < solution.length) {\n        setCurrentGuess(prev => {\n          return prev + key;\n        });\n      }\n    }\n  };\n\n  return {\n    turn,\n    currentGuess,\n    guesses,\n    isCorrect,\n    handleKeyup\n  };\n};\n\n_s(useWordle, \"IVXWGlg92Q9wlAIzJ5cBAfAX2uI=\");\n\nexport default useWordle;","map":{"version":3,"sources":["/Users/remiquilliet/Documents/Projets/lqdlf/react-footdle/src/hooks/useWordle.js"],"names":["useState","useWordle","solution","turn","setTurn","currentGuess","setCurrentGuess","guesses","setGuesses","history","setHistory","isCorrect","setIsCorrect","formatGuess","solutionArray","formattedGuess","map","l","key","color","forEach","i","includes","indexOf","addNewGuess","handleKeyup","console","log","length","formatted","prev","slice","test"],"mappings":"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","sourcesContent":["import { useState } from \"react\"\n\nconst useWordle = (solution) => {\n\n    const [turn, setTurn] = useState(0) \n    const [currentGuess, setCurrentGuess] = useState('')\n    const [guesses, setGuesses] = useState([]) // each guess is an array\n    const [history, setHistory] = useState([]) // each guess is a string\n    const [isCorrect, setIsCorrect] = useState(false)\n\n    const formatGuess = () => {\n        let solutionArray = [...solution]\n        let formattedGuess = [...currentGuess].map((l) => {\n            return {key: l, color: 'grey'}\n        })\n\n        // find green letters\n        formattedGuess.forEach((l,i) => {\n            if(solutionArray[i] === l.key) {\n                formattedGuess[i].color = 'green'\n                solutionArray[i] = null\n            }\n        })\n\n        // find yellox letters\n        formattedGuess.forEach((l,i) => {\n            if(solutionArray.includes(l.key) && l.color !== 'green') {\n                formattedGuess[i].color = 'yellow'\n                solutionArray[solutionArray.indexOf(l.key)] = null\n            }\n        })\n        \n        return formattedGuess\n    }\n\n    const addNewGuess = () => {\n\n\n    }\n\n    const handleKeyup = ({key}) => {\n        if (key === 'Enter'){\n            // only add guess if turn  is less than 5\n            if (turn > 5){\n                console.log('you used all your guesses')\n                return\n            }\n            // do not allow duplicate words\n            if (history.includes(currentGuess)){\n                console.log('you already tried this word')\n                return\n            }\n            // check word is solution.length chars long\n            if (currentGuess.length !== solution.length){\n                console.log('guess must be x chars long')\n                return\n            }\n            const formatted = formatGuess()\n            console.log(formatted)\n            \n\n\n\n        }\n\n\n        if (key === 'Backspace'){\n            setCurrentGuess((prev) => {\n                return prev.slice(0,-1)\n            })\n            return\n        }\n        \n        if (/^[A-Za-z]$/.test(key)) {\n            if (currentGuess.length < solution.length) {\n                setCurrentGuess((prev) => {\n                    return prev + key\n                })\n            }\n        }\n    }\n\n    return {turn, currentGuess, guesses, isCorrect, handleKeyup}\n}\n\nexport default useWordle"]},"metadata":{},"sourceType":"module"}